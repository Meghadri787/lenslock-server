import { RESPONSE_MESSAGES } from "../constants/responseMessage.constants.js";
import { Buckets } from "../model/bucket.model.js";
import QRCode from "qrcode";
import { sendEmail } from "../utils/sendMail.js";

class BucketService {
    async createBucket(body, userId) {
        const bucket = await Buckets.create({
            ...body,
            user: userId,
        });

        return bucket;
    }

    async getBuckets(userId) {
        console.log(userId);
        const buckets = await Buckets.find({ user: userId })
            .populate("user", "_id profile_pic name email")
            .populate({
                path: "accessList",
                select: "_id name email profile_pic",
            })
            .populate("accessRequests.user", "_id profile_pic name email")
            .populate("mediaList",
                "_id media mediaType createdAt");

        return buckets;
    }

    async getBucket(id) {
        const bucket = await Buckets.findById(id).populate("user", "_id profile_pic name email")
            .populate({
                path: "accessList",
                select: "_id name email profile_pic",
            })
            .populate("accessRequests.user", "_id profile_pic name email")
            .populate("mediaList",
                "_id media mediaType createdAt");

        if (!bucket) {
            throw new Error("Bucket not found");
        }

        return bucket;
    }

    async updateBucket(id, body, userId) {
        const bucket = await Buckets.findById(id);

        if (!bucket) {
            throw new Error("Bucket not found");
        }

        if (bucket.photographer.toString() !== userId) {
            throw new Error("Not authorized to update this bucket");
        }

        const updatedBucket = await Buckets.findByIdAndUpdate(id, body, {
            new: true,
            runValidators: true,
        });

        return updatedBucket;
    }

    async deleteBucket(id, userId) {
        const bucket = await Buckets.findById(id);

        if (!bucket) {
            throw new Error("Bucket not found");
        }

        if (bucket.photographer.toString() !== userId) {
            throw new Error("Not authorized to delete this bucket");
        }

        await bucket.deleteOne();
        return { message: "Bucket deleted successfully" };
    }

    async generateQRCode(id, userId) {
        const bucket = await Buckets.findById(id).populate(
            "photographer",
            "name email"
        );

        if (!bucket) {
            throw new Error("Bucket not found");
        }

        if (bucket.photographer.toString() !== userId) {
            throw new Error(
                "Not authorized to generate QR code for this bucket"
            );
        }

        // Generate QR code data URL
        const qrCodeDataUrl = await QRCode.toDataURL(
            JSON.stringify({
                bucketId: bucket._id,
                bucketName: bucket.name,
                studioId: bucket.studio,
                photographerId: bucket.photographer._id,
                photographerName: bucket.photographer.name,
                timestamp: new Date().toISOString(),
            })
        );

        return {
            qrCode: qrCodeDataUrl,
            bucket,
        };
    }

    async sendQRCode(id, email, userId) {
        const bucket = await Buckets.findById(id).populate(
            "photographer",
            "name email"
        );

        if (!bucket) {
            throw new Error("Bucket not found");
        }

        if (bucket.photographer.toString() !== userId) {
            throw new Error("Not authorized to send QR code for this bucket");
        }

        // Generate QR code
        const { qrCode } = await this.generateQRCode(id, userId);

        // Send email with QR code
        await sendEmail({
            to: email,
            subject: `QR Code for ${bucket.name}`,
            html: `
                <h1>QR Code for ${bucket.name}</h1>
                <p>Here is the QR code for accessing the bucket "${bucket.name}".</p>
                <p>This QR code was generated by ${bucket.photographer.name}.</p>
                <img src="${qrCode}" alt="Bucket QR Code" />
                <p>Scan this QR code to access the bucket.</p>
            `,
        });

        return {
            message: "QR code sent successfully",
            bucket,
        };
    }

    async requestBucketAccess(id, userId) {
        const bucket = await Buckets.findById(id).populate("user", "_id profile_pic name email");

        if (!bucket) {
            throw new Error("Bucket not found");
        }

        // Check if user is not the bucket owner
        if (bucket.user._id.toString() === userId) {
            throw new Error("Cannot request access to your own bucket");
        }

        console.log("========================", bucket.accessList, userId);


        // Check if user already has access
        if (
            bucket.accessList.some(
                (access) => access.toString() === userId.toString()
            )
        ) {
            throw new Error("You already have access to this bucket");
        }

        // Check if user already has a pending request
        if (
            bucket.accessRequests.some(
                (request) => request.user.toString() === userId
            )
        ) {
            throw new Error("You already have a pending access request");
        }

        // Add access request

        const isMatch = bucket.accessRequests.find((item) => String(item.user) === String(userId))
        console.log(isMatch, userId);

        if (isMatch) {
            throw Error("You have already send request for access this Bucket ")
        }

        bucket.accessRequests.push({
            user: userId,
        });

        await bucket.save();

        // Send notification email to photographer
        await sendEmail({
            receiver: bucket.user.email,
            subject: "New Bucket Access Request",
            message: `
                Someone has requested access to your bucket "${bucket.name}".
                Please review and respond to this request.`
        });

        return bucket;
    }

    async respondToAccessRequest(id, requestId, response, userId) {
        const bucket = await Buckets.findById(id).populate(
            "user",
            " _id  name email"
        )
            .populate("accessRequests.user", "_id email name")
            ;

        if (!bucket) {
            throw new Error("Bucket not found");
        }

        // Check if user is the bucket owner
        if (bucket.user?._id.toString() !== userId.toString()) {
            throw new Error("Not authorized to respond to access requests");
        }

        // Find the access request
        const accessRequest = bucket.accessRequests.find(item => String(item.user._id) === String(requestId));
        if (!accessRequest) {
            throw new Error("Access request not found");
        }

        if (response === "accept") {
            // Add user to access list

            const isMatch = bucket.accessList.find(item => item.toString() === accessRequest.user._id.toString())
            if (isMatch) {
                throw Error("User already access this Bucket !")
            }

            bucket.accessList.push(
                accessRequest.user._id,
            );

            console.log("---------", accessRequest);

            // Send acceptance email to user
            await sendEmail(
                accessRequest.user.email,
                "Bucket Access Request Accepted",
                `
                    Access Request Accepted
                    Your request for access to "${bucket.name}" has been accepted.
                    You can now view the contents of this bucket.
                `,
            );
        } else if (response === "reject") {
            // Send rejection email to user
            await sendEmail(
                accessRequest.user.email,
                "Bucket Access Request Rejected",
                `
                    Access Request Rejected
                    Your request for access to "${bucket.name}" has been rejected.
                `,
            );
        } else {
            throw new Error(
                "Invalid response. Must be either 'accept' or 'reject'"
            );
        }

        // Remove the access request
        bucket.accessRequests = bucket.accessRequests.filter(
            (request) => request.user._id.toString() !== requestId.toString()
        );

        await bucket.save();

        return {
            message: `Access request ${response}ed successfully`,
            bucket,
        };
    }
}

export default new BucketService();
